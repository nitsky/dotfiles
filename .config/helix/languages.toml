[[language]]
formatter = { command = "prettier", args = ["--parser", "css"] }
name = "css"

[[language]]
formatter = { command = "prettier", args = ["--parser", "html"] }
name = "html"

[[language]]
auto-format = true
language-servers = [{ except-features = ["format"], name = "typescript-language-server" }, "biome"]
name = "javascript"

[[language]]
auto-format = true
formatter = { command = "biome", args = ["check", "--apply", "--stdin-file-path", "file.json"] }
language-servers = [{ except-features = ["format"], name = "vscode-json-language-server" }, "biome"]
name = "json"

[[language]]
auto-format = true
formatter = { command = "biome", args = ["check", "--apply", "--stdin-file-path", "file.jsx"] }
language-servers = [{ except-features = ["format"], name = "typescript-language-server" }, "biome", "eslint", "tailwind"]
name = "jsx"

[[language]]
auto-format = true
formatter = { command = "prettier", args = ["--parser", "markdown"] }
name = "markdown"

[[language]]
auto-format = true
file-types = ["mdx"]
formatter = { command = "prettier", args = ["--parser", "mdx"] }
grammar = "markdown"
indent = { tab-width = 2, unit = "\t" }
language-servers = ["mdx", "eslint", "tailwind"]
name = "mdx"
roots = []
scope = "source.mdx"

[[language]]
indent = { tab-width = 2, unit = "\t" }
name = "rust"

[[language]]
auto-format = true
comment-token = "//"
file-types = [{ glob = "tangram.js" }, { glob = "*.tg.js" }]
formatter = { command = "tg" , args = ["-m", "client", "format", "--stdio"] }
grammar = "javascript"
indent = { tab-width = 2, unit = "\t" }
language-servers = ["tangram"]
name = "tangram-javascript"
roots = []
scope = "source.tangram-javascript"

[[language]]
auto-format = true
comment-token = "//"
file-types = [{ glob = "tangram.ts" }, { glob = "*.tg.ts" }]
formatter = { command = "tg" , args = ["-m", "client", "format", "--stdio"] }
grammar = "typescript"
indent = { tab-width = 2, unit = "\t" }
language-servers = ["tangram"]
name = "tangram-typescript"
roots = ["tangram.ts"]
scope = "source.tangram-typescript"

[[language]]
auto-format = true
formatter = { command = "biome", args = ["check", "--apply", "--stdin-file-path", "file.tsx"] }
language-servers = [{ except-features = ["format"], name = "typescript-language-server" }, "biome", "eslint", "tailwind"]
name = "tsx"

[[language]]
auto-format = true
formatter = { command = "biome", args = ["check", "--apply", "--stdin-file-path", "file.ts"] }
language-servers = [{ except-features = ["format"], name = "typescript-language-server" }, "biome", "eslint", "tailwind"]
name = "typescript"

[language-server.biome]
args = ["lsp-proxy"]
command = "biome"

[language-server.eslint]
args = ["--stdio"]
command = "vscode-eslint-language-server"

[language-server.eslint.config]
validate = "on"
experimental = { useFlatConfig = false }
rulesCustomizations = []
run = "onType"
problems = { shortenToSingleLine = false }
nodePath = ""

[language-server.eslint.config.codeActionOnSave]
enable = true
mode = "fixAll"

[language-server.eslint.config.codeAction]
[language-server.eslint.config.codeAction.disableRuleComment]
enable = true
location = "separateLine"

[language-server.eslint.config.workingDirectory]
mode = "location"

[language-server.mdx]
args = ["--stdio"]
command = "mdx-language-server"

[language-server.rust-analyzer.config]
check = { command = "clippy", extraArgs = ["-p", "tangram_client"] }

[language-server.tailwind]
args = ["--stdio"]
command = "tailwindcss-language-server"

[language-server.tangram]
args = ["-m", "client", "lsp"]
command = "tg"
